/**
 * SPINdle (version 2.2.4)
 * Copyright (C) 2009-2014 NICTA Ltd.
 *
 * This file is part of SPINdle project.
 * 
 * SPINdle is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * SPINdle is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with SPINdle.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author H.-P. Lam (oleklam@gmail.com), National ICT Australia - Queensland Research Laboratory 
 */
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.08.07 at 09:53:03 AM EST 
//


package spindle.io.xjc.dom2;

import javax.xml.bind.annotation.XmlRegistry;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the spindle.io.xjc.dom2 package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {


    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: spindle.io.xjc.dom2
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link CtRuleBodyLiterals }
     * 
     */
    public CtRuleBodyLiterals createCtRuleBodyLiterals() {
        return new CtRuleBodyLiterals();
    }

    /**
     * Create an instance of {@link CtLiteral }
     * 
     */
    public CtLiteral createCtLiteral() {
        return new CtLiteral();
    }

    /**
     * Create an instance of {@link Conclusions }
     * 
     */
    public Conclusions createConclusions() {
        return new Conclusions();
    }

    /**
     * Create an instance of {@link CtConclusion }
     * 
     */
    public CtConclusion createCtConclusion() {
        return new CtConclusion();
    }

    /**
     * Create an instance of {@link Theory }
     * 
     */
    public Theory createTheory() {
        return new Theory();
    }

    /**
     * Create an instance of {@link CtModeConversionRule }
     * 
     */
    public CtModeConversionRule createCtModeConversionRule() {
        return new CtModeConversionRule();
    }

    /**
     * Create an instance of {@link CtModeConflictRule }
     * 
     */
    public CtModeConflictRule createCtModeConflictRule() {
        return new CtModeConflictRule();
    }

    /**
     * Create an instance of {@link CtModeExclusionRule }
     * 
     */
    public CtModeExclusionRule createCtModeExclusionRule() {
        return new CtModeExclusionRule();
    }

    /**
     * Create an instance of {@link CtLiteralVariablePair }
     * 
     */
    public CtLiteralVariablePair createCtLiteralVariablePair() {
        return new CtLiteralVariablePair();
    }

    /**
     * Create an instance of {@link CtLiteralBooleanFunctionPair }
     * 
     */
    public CtLiteralBooleanFunctionPair createCtLiteralBooleanFunctionPair() {
        return new CtLiteralBooleanFunctionPair();
    }

    /**
     * Create an instance of {@link CtRule }
     * 
     */
    public CtRule createCtRule() {
        return new CtRule();
    }

    /**
     * Create an instance of {@link CtSuperiority }
     * 
     */
    public CtSuperiority createCtSuperiority() {
        return new CtSuperiority();
    }

    /**
     * Create an instance of {@link Rules }
     * 
     */
    public Rules createRules() {
        return new Rules();
    }

    /**
     * Create an instance of {@link CtInterval }
     * 
     */
    public CtInterval createCtInterval() {
        return new CtInterval();
    }

    /**
     * Create an instance of {@link CtLiteralVariable }
     * 
     */
    public CtLiteralVariable createCtLiteralVariable() {
        return new CtLiteralVariable();
    }

    /**
     * Create an instance of {@link CtRuleHeadLiterals }
     * 
     */
    public CtRuleHeadLiterals createCtRuleHeadLiterals() {
        return new CtRuleHeadLiterals();
    }

    /**
     * Create an instance of {@link CtConclusions }
     * 
     */
    public CtConclusions createCtConclusions() {
        return new CtConclusions();
    }

    /**
     * Create an instance of {@link CtPredicates }
     * 
     */
    public CtPredicates createCtPredicates() {
        return new CtPredicates();
    }

    /**
     * Create an instance of {@link CtRuleBodyLiterals.And }
     * 
     */
    public CtRuleBodyLiterals.And createCtRuleBodyLiteralsAnd() {
        return new CtRuleBodyLiterals.And();
    }

    /**
     * Create an instance of {@link CtLiteral.Not }
     * 
     */
    public CtLiteral.Not createCtLiteralNot() {
        return new CtLiteral.Not();
    }

}
