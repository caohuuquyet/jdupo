<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
    targetNamespace="http://spin.nicta.org.au/spindle/spindleDefeasibleTheory2.xsd"
    attributeFormDefault="unqualified" version="2.0.0"
    xmlns:spindle="http://spin.nicta.org.au/spindle/spindleDefeasibleTheory2.xsd">
    <xs:simpleType name="stAtom">
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z][a-zA-Z0-9_]*"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="stMode">
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z][a-zA-Z0-9_]*"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="stTime">
        <xs:restriction base="xs:long"/>
    </xs:simpleType>
    <xs:simpleType name="stRuleLabel">
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z][a-zA-Z0-9_]*"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="stPredicate">
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z0-9]+"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="stLiteralVariableAtom">
        <xs:restriction base="xs:string">
            <xs:pattern value="@.*"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="stLiteralBooleanFunction">
        <xs:restriction base="xs:string"> </xs:restriction>
    </xs:simpleType>
    <!--
    <xs:simpleType name="stLiteralBooleanFunction">
        <xs:restriction base="xs:string">
            <xs:pattern value="$.*$"/>
        </xs:restriction>
    </xs:simpleType>
    -->
    <xs:complexType name="ctInterval">
        <xs:sequence minOccurs="1">
            <xs:element name="start" type="spindle:stTime" minOccurs="0"/>
            <xs:element name="end" type="spindle:stTime" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ctPredicates">
        <xs:sequence maxOccurs="unbounded">
            <xs:element name="predicate" type="spindle:stPredicate"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ctLiteral">
        <xs:sequence>
            <xs:element name="atom" type="spindle:stAtom" minOccurs="0"/>
            <xs:element name="mode" type="spindle:stMode" minOccurs="0"/>
            <xs:element maxOccurs="2" minOccurs="0" name="not">
                <xs:complexType>
                    <xs:choice>
                        <xs:element name="atom" type="spindle:stAtom"/>
                        <xs:element name="mode" type="spindle:stMode"/>
                    </xs:choice>
                </xs:complexType>
            </xs:element>
            <xs:element name="interval" type="spindle:ctInterval" minOccurs="0" maxOccurs="1"/>
            <xs:element name="predicates" minOccurs="0" maxOccurs="1" type="spindle:ctPredicates">
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ctRuleHeadLiterals">
        <xs:sequence>
            <xs:element name="literal" type="spindle:ctLiteral" maxOccurs="unbounded" minOccurs="1"
            />
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ctRuleBodyLiterals">
        <xs:choice>
            <xs:element name="literal" type="spindle:ctLiteral"/>
            <xs:element name="and">
                <xs:complexType>
                    <xs:sequence maxOccurs="unbounded">
                        <xs:element name="literal" type="spindle:ctLiteral"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:choice>
    </xs:complexType>
    <xs:complexType name="ctRule">
        <xs:sequence>
            <xs:element maxOccurs="1" minOccurs="0" name="mode" type="spindle:stMode"/>
            <xs:element maxOccurs="1" minOccurs="0" name="interval" type="spindle:ctInterval"/>
            <xs:element name="head" maxOccurs="1" minOccurs="1" type="spindle:ctRuleHeadLiterals"/>
            <xs:element name="body" minOccurs="0" type="spindle:ctRuleBodyLiterals" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="label" type="spindle:stRuleLabel" use="optional"/>
        <xs:attribute name="ruletype" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="STRICT"/>
                    <xs:enumeration value="DEFEASIBLE"/>
                    <xs:enumeration value="DEFEATER"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="ctSuperiority">
        <xs:attribute name="superior" type="spindle:stRuleLabel" use="required"/>
        <xs:attribute name="inferior" type="spindle:stRuleLabel" use="required"/>
    </xs:complexType>
    <xs:complexType name="ctModeConversionRule">
        <xs:sequence>
            <xs:element maxOccurs="1" minOccurs="1" name="from" type="spindle:stMode"/>
            <xs:element maxOccurs="unbounded" name="to" type="spindle:stMode"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ctModeConflictRule">
        <xs:sequence>
            <xs:element maxOccurs="1" minOccurs="1" name="mode" type="spindle:stMode"/>
            <xs:element maxOccurs="unbounded" minOccurs="1" name="conflictWIth"
                type="spindle:stMode"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ctModeExclusionRule">
        <xs:sequence>
            <xs:element name="mode" type="spindle:stMode"/>
            <xs:element maxOccurs="unbounded" name="excludeWith" type="spindle:stMode"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ctLiteralVariable">
        <xs:sequence>
            <xs:element name="atom" type="spindle:stLiteralVariableAtom"/>
            <xs:element minOccurs="0" name="predicates" type="spindle:ctPredicates"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ctLiteralVariablePair">
        <xs:sequence>
            <xs:element name="name" type="spindle:ctLiteralVariable"/>
            <xs:element name="value" type="spindle:ctLiteralVariable"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ctLiteralBooleanFunctionPair">
        <xs:sequence>
            <xs:element name="name" type="spindle:ctLiteralVariable"/>
            <xs:element name="value" type="spindle:stLiteralBooleanFunction"/>
        </xs:sequence>
    </xs:complexType>
    <xs:element name="theory">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="0" name="description" type="xs:string"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="convert"
                    type="spindle:ctModeConversionRule"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="conflict"
                    type="spindle:ctModeConflictRule"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="exclude"
                    type="spindle:ctModeExclusionRule"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="literalVariable"
                    type="spindle:ctLiteralVariablePair"> </xs:element>
                <xs:element name="literalBooleanFunction" maxOccurs="unbounded" minOccurs="0"
                    type="spindle:ctLiteralBooleanFunctionPair"> </xs:element>
                <xs:choice maxOccurs="unbounded">
                    <xs:element name="fact" type="spindle:ctLiteral"/>
                    <xs:element name="rule" type="spindle:ctRule"/>
                </xs:choice>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="superiority"
                    type="spindle:ctSuperiority"> </xs:element>
            </xs:sequence>
        </xs:complexType>
        <!--
        <xs:key name="ruleLabelKey">
            <xs:selector xpath="spindle:rule"/>
            <xs:field xpath="@label"/>
        </xs:key>
        <xs:keyref name="superiorRuleRef" refer="spindle:ruleLabelKey">
            <xs:selector xpath="spindle:superiority"/>
            <xs:field xpath="@superior"/>
        </xs:keyref>
        <xs:keyref name="inferiorRuleRef" refer="spindle:ruleLabelKey">
            <xs:selector xpath="spindle:superiority"/>
            <xs:field xpath="@inferior"/>
        </xs:keyref>
        -->
    </xs:element>
    <xs:complexType name="ctConclusion">
        <xs:sequence>
            <xs:element name="tag">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="DEFINITE_PROVABLE"/>
                        <xs:enumeration value="NOT_DEFINITE_PROVABLE"/>
                        <xs:enumeration value="DEFEASIBLE_PROVABLE"/>
                        <xs:enumeration value="NOT_DEFEASIBLE_PROVABLE"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="literal" type="spindle:ctLiteral"/>
        </xs:sequence>
    </xs:complexType>
    <xs:element name="conclusions">
      <xs:complexType>
            <xs:sequence>
            	<xs:element maxOccurs="1" minOccurs="0"
            		name="description" type="xs:string" />
            	<xs:sequence maxOccurs="unbounded" minOccurs="0">
            		<xs:element name="conclusion" type="spindle:ctConclusion"></xs:element>
            	</xs:sequence>
            </xs:sequence>
      </xs:complexType>
    </xs:element>
    <!-- For the use of parsing a single rule -->
    <xs:element name="rules">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="rule" type="spindle:ctRule"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:complexType name="ctConclusions">
    	<xs:sequence>
    		<xs:element name="description" type="xs:string"></xs:element>
    		<xs:sequence>
    			<xs:element name="conclusion" type="spindle:ctConclusion"></xs:element>
    		</xs:sequence>
    	</xs:sequence>
    </xs:complexType>
</xs:schema>
